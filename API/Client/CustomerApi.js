/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.CustomerApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at &lt;a href&#x3D;&#39;https://www.tweak.com&#39;&gt;https://www.tweak.com&lt;/a&gt;, #tweak.
 * Version: 1.0.0
 * Generated by: class io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.CustomerApi');

goog.require('API.Client.AccessToken');
goog.require('API.Client.Customer');
goog.require('API.Client.Design');
goog.require('API.Client.inline_response_200');
goog.require('API.Client.inline_response_200_1');
goog.require('API.Client.inline_response_200_2');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.CustomerApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('CustomerApiBasePath') ?
                   /** @type {!string} */ ($injector.get('CustomerApiBasePath')) :
                   'https://apidevcdn.tweak.com/api';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('CustomerApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('CustomerApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.CustomerApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Confirm a user registration with email verification token.
 * 
 * @param {!string} uid 
 * @param {!string} token 
 * @param {!string=} opt_redirect 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.CustomerApi.prototype.customerConfirm = function(uid, token, opt_redirect, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/confirm';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'uid' is set
  if (!uid) {
    throw new Error('Missing required parameter uid when calling customerConfirm');
  }
  // verify required parameter 'token' is set
  if (!token) {
    throw new Error('Missing required parameter token when calling customerConfirm');
  }
  if (uid !== undefined) {
    queryParameters['uid'] = uid;
  }

  if (token !== undefined) {
    queryParameters['token'] = token;
  }

  if (opt_redirect !== undefined) {
    queryParameters['redirect'] = opt_redirect;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Count instances of the model matched by where from the data source.
 * 
 * @param {!string=} opt_where Criteria to match model instances
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.inline_response_200>}
 */
API.Client.CustomerApi.prototype.customerCount = function(opt_where, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/count';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_where !== undefined) {
    queryParameters['where'] = opt_where;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create a new instance of the model and persist it into the data source.
 * 
 * @param {!Customer=} opt_data Model instance data
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Customer>}
 */
API.Client.CustomerApi.prototype.customerCreate = function(opt_data, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_data,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create a change stream.
 * 
 * @param {!string=} opt_options 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Object>}
 */
API.Client.CustomerApi.prototype.customerCreateChangeStreamGetCustomersChangeStream = function(opt_options, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/change-stream';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_options !== undefined) {
    queryParameters['options'] = opt_options;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create a change stream.
 * 
 * @param {!string=} opt_options 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Object>}
 */
API.Client.CustomerApi.prototype.customerCreateChangeStreamPostCustomersChangeStream = function(opt_options, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/change-stream';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['options'] = opt_options;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete a model instance by {{id}} from the data source.
 * 
 * @param {!string} id Model id
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Object>}
 */
API.Client.CustomerApi.prototype.customerDeleteById = function(id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerDeleteById');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Check whether a model instance exists in the data source.
 * 
 * @param {!string} id Model id
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.inline_response_200_2>}
 */
API.Client.CustomerApi.prototype.customerExistsGetCustomersidExists = function(id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}/exists'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerExistsGetCustomersidExists');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Check whether a model instance exists in the data source.
 * 
 * @param {!string} id Model id
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.inline_response_200_2>}
 */
API.Client.CustomerApi.prototype.customerExistsHeadCustomersid = function(id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerExistsHeadCustomersid');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'HEAD',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Find all instances of the model matched by filter from the data source.
 * 
 * @param {!string=} opt_filter Filter defining fields, where, include, order, offset, and limit
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Customer>>}
 */
API.Client.CustomerApi.prototype.customerFind = function(opt_filter, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_filter !== undefined) {
    queryParameters['filter'] = opt_filter;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Find a model instance by {{id}} from the data source.
 * 
 * @param {!string} id Model id
 * @param {!string=} opt_filter Filter defining fields and include
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Customer>}
 */
API.Client.CustomerApi.prototype.customerFindById = function(id, opt_filter, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerFindById');
  }
  if (opt_filter !== undefined) {
    queryParameters['filter'] = opt_filter;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Find first instance of the model matched by filter from the data source.
 * 
 * @param {!string=} opt_filter Filter defining fields, where, include, order, offset, and limit
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Customer>}
 */
API.Client.CustomerApi.prototype.customerFindOne = function(opt_filter, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/findOne';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_filter !== undefined) {
    queryParameters['filter'] = opt_filter;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Login a user with username/email and password.
 * 
 * @param {!API.Client.Object} credentials 
 * @param {!string=} opt_include Related objects to include in the response. See the description of return value for more details.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Object>}
 */
API.Client.CustomerApi.prototype.customerLogin = function(credentials, opt_include, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/login';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'credentials' is set
  if (!credentials) {
    throw new Error('Missing required parameter credentials when calling customerLogin');
  }
  if (opt_include !== undefined) {
    queryParameters['include'] = opt_include;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: credentials,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Logout a user with access token.
 * 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.CustomerApi.prototype.customerLogout = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/logout';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Counts accessTokens of Customer.
 * 
 * @param {!string} id Customer id
 * @param {!string=} opt_where Criteria to match model instances
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.inline_response_200>}
 */
API.Client.CustomerApi.prototype.customerPrototypeCountAccessTokens = function(id, opt_where, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}/accessTokens/count'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerPrototypeCountAccessTokens');
  }
  if (opt_where !== undefined) {
    queryParameters['where'] = opt_where;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Counts designs of Customer.
 * 
 * @param {!string} id Customer id
 * @param {!string=} opt_where Criteria to match model instances
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.inline_response_200>}
 */
API.Client.CustomerApi.prototype.customerPrototypeCountDesigns = function(id, opt_where, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}/designs/count'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerPrototypeCountDesigns');
  }
  if (opt_where !== undefined) {
    queryParameters['where'] = opt_where;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Creates a new instance in accessTokens of this model.
 * 
 * @param {!string} id Customer id
 * @param {!AccessToken=} opt_data 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.AccessToken>}
 */
API.Client.CustomerApi.prototype.customerPrototypeCreateAccessTokens = function(id, opt_data, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}/accessTokens'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerPrototypeCreateAccessTokens');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_data,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Creates a new instance in designs of this model.
 * 
 * @param {!string} id Customer id
 * @param {!Design=} opt_data 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Design>}
 */
API.Client.CustomerApi.prototype.customerPrototypeCreateDesigns = function(id, opt_data, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}/designs'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerPrototypeCreateDesigns');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_data,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Deletes all accessTokens of this model.
 * 
 * @param {!string} id Customer id
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.CustomerApi.prototype.customerPrototypeDeleteAccessTokens = function(id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}/accessTokens'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerPrototypeDeleteAccessTokens');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Deletes all designs of this model.
 * 
 * @param {!string} id Customer id
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.CustomerApi.prototype.customerPrototypeDeleteDesigns = function(id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}/designs'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerPrototypeDeleteDesigns');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete a related item by id for accessTokens.
 * 
 * @param {!string} id Customer id
 * @param {!string} fk Foreign key for accessTokens
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.CustomerApi.prototype.customerPrototypeDestroyByIdAccessTokens = function(id, fk, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}/accessTokens/{fk}'
      .replace('{' + 'id' + '}', String(id))
      .replace('{' + 'fk' + '}', String(fk));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerPrototypeDestroyByIdAccessTokens');
  }
  // verify required parameter 'fk' is set
  if (!fk) {
    throw new Error('Missing required parameter fk when calling customerPrototypeDestroyByIdAccessTokens');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete a related item by id for designs.
 * 
 * @param {!string} id Customer id
 * @param {!string} fk Foreign key for designs
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.CustomerApi.prototype.customerPrototypeDestroyByIdDesigns = function(id, fk, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}/designs/{fk}'
      .replace('{' + 'id' + '}', String(id))
      .replace('{' + 'fk' + '}', String(fk));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerPrototypeDestroyByIdDesigns');
  }
  // verify required parameter 'fk' is set
  if (!fk) {
    throw new Error('Missing required parameter fk when calling customerPrototypeDestroyByIdDesigns');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Find a related item by id for accessTokens.
 * 
 * @param {!string} id Customer id
 * @param {!string} fk Foreign key for accessTokens
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.AccessToken>}
 */
API.Client.CustomerApi.prototype.customerPrototypeFindByIdAccessTokens = function(id, fk, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}/accessTokens/{fk}'
      .replace('{' + 'id' + '}', String(id))
      .replace('{' + 'fk' + '}', String(fk));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerPrototypeFindByIdAccessTokens');
  }
  // verify required parameter 'fk' is set
  if (!fk) {
    throw new Error('Missing required parameter fk when calling customerPrototypeFindByIdAccessTokens');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Find a related item by id for designs.
 * 
 * @param {!string} id Customer id
 * @param {!string} fk Foreign key for designs
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Design>}
 */
API.Client.CustomerApi.prototype.customerPrototypeFindByIdDesigns = function(id, fk, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}/designs/{fk}'
      .replace('{' + 'id' + '}', String(id))
      .replace('{' + 'fk' + '}', String(fk));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerPrototypeFindByIdDesigns');
  }
  // verify required parameter 'fk' is set
  if (!fk) {
    throw new Error('Missing required parameter fk when calling customerPrototypeFindByIdDesigns');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Queries accessTokens of Customer.
 * 
 * @param {!string} id Customer id
 * @param {!string=} opt_filter 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.AccessToken>>}
 */
API.Client.CustomerApi.prototype.customerPrototypeGetAccessTokens = function(id, opt_filter, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}/accessTokens'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerPrototypeGetAccessTokens');
  }
  if (opt_filter !== undefined) {
    queryParameters['filter'] = opt_filter;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Queries designs of Customer.
 * 
 * @param {!string} id Customer id
 * @param {!string=} opt_filter 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Design>>}
 */
API.Client.CustomerApi.prototype.customerPrototypeGetDesigns = function(id, opt_filter, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}/designs'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerPrototypeGetDesigns');
  }
  if (opt_filter !== undefined) {
    queryParameters['filter'] = opt_filter;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Patch attributes for a model instance and persist it into the data source.
 * 
 * @param {!string} id Customer id
 * @param {!Customer=} opt_data An object of model property name/value pairs
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Customer>}
 */
API.Client.CustomerApi.prototype.customerPrototypeUpdateAttributesPatchCustomersid = function(id, opt_data, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerPrototypeUpdateAttributesPatchCustomersid');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: opt_data,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Patch attributes for a model instance and persist it into the data source.
 * 
 * @param {!string} id Customer id
 * @param {!Customer=} opt_data An object of model property name/value pairs
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Customer>}
 */
API.Client.CustomerApi.prototype.customerPrototypeUpdateAttributesPutCustomersid = function(id, opt_data, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerPrototypeUpdateAttributesPutCustomersid');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: opt_data,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update a related item by id for accessTokens.
 * 
 * @param {!string} id Customer id
 * @param {!string} fk Foreign key for accessTokens
 * @param {!AccessToken=} opt_data 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.AccessToken>}
 */
API.Client.CustomerApi.prototype.customerPrototypeUpdateByIdAccessTokens = function(id, fk, opt_data, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}/accessTokens/{fk}'
      .replace('{' + 'id' + '}', String(id))
      .replace('{' + 'fk' + '}', String(fk));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerPrototypeUpdateByIdAccessTokens');
  }
  // verify required parameter 'fk' is set
  if (!fk) {
    throw new Error('Missing required parameter fk when calling customerPrototypeUpdateByIdAccessTokens');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: opt_data,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update a related item by id for designs.
 * 
 * @param {!string} id Customer id
 * @param {!string} fk Foreign key for designs
 * @param {!Design=} opt_data 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Design>}
 */
API.Client.CustomerApi.prototype.customerPrototypeUpdateByIdDesigns = function(id, fk, opt_data, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}/designs/{fk}'
      .replace('{' + 'id' + '}', String(id))
      .replace('{' + 'fk' + '}', String(fk));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerPrototypeUpdateByIdDesigns');
  }
  // verify required parameter 'fk' is set
  if (!fk) {
    throw new Error('Missing required parameter fk when calling customerPrototypeUpdateByIdDesigns');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: opt_data,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Replace attributes for a model instance and persist it into the data source.
 * 
 * @param {!string} id Model id
 * @param {!Customer=} opt_data Model instance data
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Customer>}
 */
API.Client.CustomerApi.prototype.customerReplaceById = function(id, opt_data, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/{id}/replace'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling customerReplaceById');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_data,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Replace an existing model instance or insert a new one into the data source.
 * 
 * @param {!Customer=} opt_data Model instance data
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Customer>}
 */
API.Client.CustomerApi.prototype.customerReplaceOrCreate = function(opt_data, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/replaceOrCreate';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_data,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Reset password for a user with email.
 * 
 * @param {!API.Client.Object} options 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.CustomerApi.prototype.customerResetPassword = function(options, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/reset';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'options' is set
  if (!options) {
    throw new Error('Missing required parameter options when calling customerResetPassword');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: options,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update instances of the model matched by {{where}} from the data source.
 * 
 * @param {!string=} opt_where Criteria to match model instances
 * @param {!Customer=} opt_data An object of model property name/value pairs
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.inline_response_200_1>}
 */
API.Client.CustomerApi.prototype.customerUpdateAll = function(opt_where, opt_data, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/update';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_where !== undefined) {
    queryParameters['where'] = opt_where;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_data,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Patch an existing model instance or insert a new one into the data source.
 * 
 * @param {!Customer=} opt_data Model instance data
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Customer>}
 */
API.Client.CustomerApi.prototype.customerUpsertPatchCustomers = function(opt_data, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
    data: opt_data,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Patch an existing model instance or insert a new one into the data source.
 * 
 * @param {!Customer=} opt_data Model instance data
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Customer>}
 */
API.Client.CustomerApi.prototype.customerUpsertPutCustomers = function(opt_data, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: opt_data,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update an existing model instance or insert a new one into the data source based on the where criteria.
 * 
 * @param {!string=} opt_where Criteria to match model instances
 * @param {!Customer=} opt_data An object of model property name/value pairs
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Customer>}
 */
API.Client.CustomerApi.prototype.customerUpsertWithWhere = function(opt_where, opt_data, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Customers/upsertWithWhere';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_where !== undefined) {
    queryParameters['where'] = opt_where;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_data,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
